class Vehicle{
  constructor(licensePlate,manufacture){
    this.licensePlate = licensePlate;
    this.manufacture = manufacture;
    this.engineActive = false;
  }

  startEngines() { 
    console.log(`Mesin kendaraan : ${this.licensePlate} dinyalakan!`);
  }

  info() { 
    console.log(`Nomor kendaraan : ${this.licensePlate}`);
    console.log(`Manufacture : ${this.manufacture}`);
    console.log(`Mesin : ${this.engineActive ? "Active" : "Inactive"}`);
  }

  parking() { 
    console.log(`Kendaraan ${this.licensePlate} parkir!`);
  }
}

 // DIBAWAH INI CHILDCLASS DARI PARENTCHILD NYA : VEHICLE

class Car extends Vehicle {
  constructor(licensePlate,manufacture,wheels){
    super(licensePlate,manufacture); /* Memberikan akses hak licensePlate dan manufacture kepada class Car */
    this.wheels = wheels;
  }

  droveOff() {
    console.log(`Kendaraan : ${this.licensePlate} melaju!`);
  }

  openDoor() {
    console.log(`Membuka pintu!`);
  }

  // Overriding method info dari ParentClass
  info() {
    super.info();
    console.log(`Jumlah roda : ${this.wheels}`);
  }
}


console.log("");

class CarTwo extends Car {
  constructor(licensePlate,manufacture,wheels){
    super(licensePlate,manufacture); /* Memberikan akses hak licensePlate dan manufacture kepada class Car */
    this.wheels = wheels;
  }

  droveOff() {
    console.log(`Kendaraan : ${this.licensePlate} melaju!`);
  }

  openDoor() {
    console.log(`Membuka pintu!`);
  }

  // Overriding method info dari ParentClass
  info() {
    super.info();
  }
}


console.log("");

class Motorcycle extends Car {
  constructor(licensePlate,manufacture,wheels){
    super(licensePlate,manufacture);
    this.wheels = wheels;
  }

  droveOff() {
    console.log(`Kendaraan ${this.licensePlate}`);
  }

  doWheelie() { 
    console.log(`Stander motor!`);
  }

  info() {
    super.info();
  }
}


console.log("");

class Plane extends Motorcycle {
  constructor(licensePlate,manufacture,wings){
    super(licensePlate,manufacture);
    this.wings = wings;
  }

  droveOff() {
    console.log(`Menerbangkan pesawat!`);
  }

  openDoor(){
    console.log(`Membuka pintu pesawat!`);
  }
  
  info() {
    console.log(`Nomor Kendaraan : ${this.licensePlate}`);
    console.log(`Manufacture : ${this.manufacture}`);
    console.log(`Jumlah sayap pesawat : ${this.wings}`);
  }
}
const jeksonAir = new Plane("B5806TBQ","Garuda",2);

class VehicleFactory { //Class baru
  static repair(vehicles) { /*Method repain yang menerima banyak kendaraan sebagai parameternya*/
    vehicles.forEach(vehicle => {
      console.log(`Kendaraan ${vehicle.licensePlate} sedang dalam perawatan`);
    })
  }
}

const johnCar = new Car("H121S", "Honda", 4);
const dimasCar = new Car("TA1408K", "Tesla", 4);
const tomMotor = new Motorcycle("GF121J","Yamaha",2);

//Membuat instance untuk memanggil fungsi repair
//const vehicleFactory = new VehicleFactory(); /* Tidak perlu menggunakan instanse ini jika menggunakan static sebelum deklarasi method repair */
VehicleFactory.repair([johnCar,tomMotor,dimasCar]); /* Pemanggilan method repair langsung dari class-nya */